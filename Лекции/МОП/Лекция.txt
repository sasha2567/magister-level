Математические основы парадиг программирования

Введение в функциональное программирование

в традиционных или итеративных языках программирования состояние программ определяется набором значений переменных. пусть начальное состояние программы:
G0 -> G'
Во время выполнения итеративной программы она проходит через несколько состояний:
G = G0 -> G1 -> ... -> G'
Состояние программы при итеративном проходе изменяется при помощи присваивания. Ход работы алгоритма может меняться с помощью управляющих операторов. 
Функциональная программа предствляет собой некое выражение (в виде функции). Выполнение этой программы предполагает вычисление этой функции и возврат результата:
G = f(G0)
Отличительные черты функционального программирования:
	- не используются переменные в итеративном смысле
	- как правило нет чиклов
	- не имеет смысла последовательность операторов
	- вместо циклов применяется рекурсия
Основы лямбда исчислений

l x.E
R->(R->R)
Переменные могут быть свободными или связннымию В общем слечае нельзя менять переменную. Часть выражения, находящаяся внутри области связывания, называется областью видимости. 

Лямбда исчисления как формальная система
l - терм:
состоит из переменных и фиксированного набора констант с помощью применения функций и лямбда-абстрогирований
	- переменные
	- константы
	- комбинации
	- абстракции
Exp = Var | Const | Exp Exp | l Var.Exp

Свободная переменная - FV(S):
							FV(x)={x}
							FV(c)=0
							FV(ST)=FV(S) U FV(T)
							FV(l x.S)=FV(S)\{x}
Связанная переменная - BV(S):
							BV(x)=0
							BV(c)=0
							BV(ST)=BV(S) U BV(T)
							BV(l x.S)=BV(S)U{x}

Подстановка (смотри рисунок (снимок ))

Конверсия

l-исчисления основаны на 3-х видах конверсии, которые позволяют переходить от одного терма к другому

	a-конверсия: l x.S -a-> l y.S[x:=y], y !c FV(S) - позволяет 
 	b-конверсия: (l x.S )T -b-> S[x:=T]
	n-конверсия: l x.Tx -n-> T, если x !c FV(T) 

Равенство l-термов

2 терма равны если можно от одного из них перейти к другому с помощью конецного набора конверсий 

Экстенсиональность

	2 свойства называются экстенсионально-эквивалентны, если они принадлежат одним и тем же объктам
	Следствие - каждое применение n-конверсии приводит к равенству 

Редукция l-термов
	
	Если для терма не возможно выполнить никакую конверсию, кроме а-конверсии, то терм находится в нормальной форме

Редукционные стратегии

	Функциональные программы представляют собой функции и выполенние этой программы - вычисление выражения. Последовательно применяем редукцию к терму, пока это возможно. Для каждого терма существует набор термов, в которые он может быть редуцирован. Выбор той или иной стратегии означает выбор между конечной и бесконечной редукцией.

	RedEx

	Теорема: Если S->T, где Т в нормальной форме, то последовательность редукций, начинающихся с S и заключающаяся в том что для редукции всегда выбирается самый внешний левый, гарантирует привидение в нормальную форму.

	Теорема Черча-Россера

	Следовательно нормальная форма (если она существует) единственно с точностью до а-конверсии

	Стратегия редуцирования начиная с самого внешнего левого редукса является наилучшей, поскольку она приведет к результату, если он достижим. Такая стратегия называется нормализованной. 

	Любая завершающаяся последовательность редкций всегда приводи к одному и тому же результату.

	Никогда не поздно прекратить выполнять редукцию по выбранной стратегии.

Комбинаторы

	Комбинатор - l-терм, который не содержит свободных переменных

	Такой терм является замкнутым и имеет фиксированный смысл, не зависимо от значений его переменных

	С помошью нескольких базовых комбинаторов и переменных можно выразить любой терм без применения операций l-абстракций

	Замкнутый терм можно выразить только через базовые комбинаторы

	I = l x.x - функция идентичности, которая оставляет свой аргумент неизменным
	K = l xy.x - служит постоянных или константных функций
	S = l fgx.fx(gx) - разделяющий комбинатор, берет 2 функции и аргумент и разделяет аргумент между функциями

	Теорема
	Для любого l-терма T существует терм T', не содержащий l-абстракций и составленный из комбинаторов I, K и S и переменных такой, что выполняется следующее FV(T')=FV(T) и T=T'

	Комбинатор I можно выразить в терминах S и K
	SK Ax = Kx (Ax) = (l y.x)(Ax) = x

	Недстатки по сравнению с l-исчислением

	Комбинаторы ипользуются как метод реализации функциональных языков как на программном так и на аппаратном уровне